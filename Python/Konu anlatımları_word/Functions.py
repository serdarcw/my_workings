#def printing(B):
#    print(f'With this function you can print {B}')
#
#printing('Serkan')


##This function, which we defined, gives the sum of the squares of arguments. Let's call and use it.#This function, which we defined, gives the sum of the squares of arguments. Let's call and use it.
#def first_function(argument_1, argument_2) :
#    print(argument_1**2 + argument_2**2)
#
#first_function(2,3)


#ğŸ’¡Tips:
#When there is no indentation, it means that the definition process of the function must end.


##Bu fonksiyonda 3ncÃ¼ Ã¶rnekte gÃ¶rÃ¼ldÃ¼ÄŸÃ¼ Ã¼zere string eÄŸer Ã§arpma ilekullanÄ±lÄ±rsa
##stringin yazÄ±mÄ±nda tekrar miktarÄ±nÄ± verecektir.
#def multiply(a, b) :
#    print(a * b)
#
#multiply(3, 5)
#multiply(-1, 2.5)
#multiply('amazing ', 3)  # it's really amazing, right?




#Burada iki fonksiyon da aynÄ± sonucu Ã¼retir ama fark nerede oluÅŸur?
#Ä°lk fonksiyon sadece iÃ§ine yazÄ±lan ifadelerin Ã§Ä±ktÄ±sÄ±nÄ± verir. Ama ikinci fonksiyon
#numerik tipte sahip bir deÄŸer Ã¼retir. Bu fark type Ã§alÄ±ÅŸtÄ±rÄ±lÄ±p gÃ¶rÃ¼lebilir
#Bunun farkÄ± da ÅŸurada Ã§Ä±kar, ilk fonksiyon deÄŸer Ã¼retmez ama ikinci fonksiyon bir deÄŸer Ã¼retir ve 
#bu deÄŸer sonrasÄ±nda da kullanÄ±labilir.

#def multiply_1(a, b) :
#    print(a * b)  # it prints something
#
#def multiply_2(a, b) :
#    return a * b  # returns any numeric data type value
#
#multiply_1(10, 5)
#print(multiply_2(10, 5))




#Q: What is the return keyword used for in Python?
#A: The purpose of a function is to receive the inputs and return some output. The return is a Python #statement which we can use in a function for sending a value back to its caller. 


#from datetime import datetime
#
#def print_time():
#    print('task completed')
#    print(datetime.now())
#    print()
#print_time()



##Arguments vs Parameters
#
##parametre ve argument fonksiyonlarda kullanÄ±lan iki tabirdir ve birbirleinie Ã§ok yakÄ±ndÄ±r anlam ##olarak. Bunu ÅŸÃ¶yle dÃ¼ÅŸÃ¼nebiliriz f(x)=2x+5, f(5)=15 yazÄ±mÄ±nda x parametredir, biz buna ##fonksiyonlarda deÄŸiÅŸken deriz ama bu x=5 yazÄ±ldÄ±ÄŸÄ±nda buradaki 5 argument dir. Yani parametre yerine
##fonksiyonda yazÄ±lan deÄŸere karÅŸÄ±lÄ±k gelir.
#
#def who(first, last) :  # 'first' and 'last' are the parameters(or variables)
#    print('Your first name is :', first)
#    print('Your last name is :', last)
#
#who('Guido', 'van Rossum')  # 'Guido' and 'van Rossum' are the arguments
#print()
#who('Marry', 'Bold')  # 'Marry' and 'Bold' are also the arguments

#Parametrede dikkat edilmesi gereken en Ã¶nemli noktalardan biri de ÅŸudur: fonksiyon yazÄ±mÄ±nda 
#eÄŸer iki parametre veriÅŸmiÅŸ ise fonksiyon Ã§aÄŸÄ±rÄ±ldÄ±ÄŸÄ±nda bu iki parametre yerine iki tane 
#argument yazma gerekliliÄŸidir. EÄŸer bir tane yazÄ±lÄ±rsa  error mesajÄ± ilekarÅŸÄ±laÅŸÄ±lacaktÄ±r.



#def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
#    print("-- This parrot wouldn't", action, end=' ')
#    print("if you put", voltage, "volts through it.")
#    print("-- Lovely plumage, the", type)
#    print("-- It's", state, "!")


#parrot(1000)                                          # 1 positional argument
#parrot(voltage=1000)                                  # 1 keyword argument
#parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
#parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments 
#parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
#parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

#Tips:
#If you have noticed the positions of the parameters voltage and action, 
# sequences or positions don't #matter when using keyword arguments.



##AÅŸaÄŸÄ±daki yazÄ±mlar hata mesajÄ± veren yaÄ±mlardÄ±r. Bu yanlÄ±ÅŸlÄ±klara dÃ¼ÅŸmemek
#iÃ§in dikkate etmek gerekmektedir.

#parrot()                     # required argument missing
#parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
#parrot(110, voltage=220)     # duplicate value for the same argument
#parrot(actor='John Cleese')  # unknown keyword argument








#En baÅŸta keyword argument tanÄ±mlanmÄ±ÅŸ continent=Europe olarak
#eÄŸer fonksiyon Ã§aÄŸÄ±rÄ±lÄ±rken bu deÄŸere bir argument girilmez ise bu durumda
#default olarak Europe alÄ±nacaktÄ±r. Ä°lk Ã¶rnekte gÃ¶rÃ¼ldÃ¼ÄŸÃ¼ gibi
#Ama ikinci ve Ã¼Ã§Ã¼ncÃ¼ Ã¶rnekte de gÃ¶zÃ¼ldÃ¼ÄŸÃ¼ Ã¼zere, yeni bir atama yapÄ±labilir. Bu atama
#direk continent=Asia yazÄ±larak da olabilir, o parametrenin pozisyonuna yeni atama yazÄ±larak da 
#yapÄ±labilmektir. ÃœÃ§Ã¼ncÃ¼ Ã¶rnek, pozisyone yeni argument i lyazarak yapÄ±lan yeni atamayÄ± gÃ¶stermektedir

#def city(capital, continent='Europe'):
#    print(capital, 'in', continent)
#
#city('Athens')  # we don't have to pass any arguments into 'continent'
#city('Ulaanbaatar', continent='Asia')  # we can change the default value by kwargs
#city('Cape Town', 'Africa')  # we can change the default value by positional args.





#*args and *kwargs
#bir fonksiyon yazdÄ±ÄŸÄ±mÄ±zda bazen fonksiyonu Ã§aÄŸÄ±rmak istediÄŸimizde iÃ§ine 
#yazacaÄŸÄ±mÄ±z argument deÄŸerinin sayÄ±sÄ±nÄ± bilemeyiz. Bu durumda *args veya *kwargs kullanÄ±lÄ±r.

#def multp(a,b):
#    return a*b
#
#print(multp(5,7))
#
#Mesela yukarÄ±daki Ã¶rnekte kaÃ§ sayÄ± yazacaÄŸÄ±mÄ± biliyorum ama ya Ã§arpacaÄŸÄ±m eleman sayÄ±sÄ±nÄ± bilmiyorsam bu durumda aÅŸaÄŸÄ±daki kulanÄ±m Ã¶ne Ã§Ä±kar. Bu kullanÄ±mda keyf sayÄ±da yazÄ±lan argument'ler 
#tuple olarak saklanÄ±r.

#def multpl(*nums):
#    multp=1
#    for i in nums:
#        multp *= i
#    return multp
#
#print(multpl(4,5,6,7,8))



#Peki ben bu sayÄ±larÄ± bir listenin iÃ§ine yazarsam: Bu durumda

#def multpl(*nums):
#    multp=1
#    for i in nums:
#        if type(i)==int or type(i)==float:
#            multp *= i
#    return multp
#
#mylist=[4,5,6,7,8]
#print(multpl(mylist))

#bu durumda iÃ§erideki listeyi bir tek eleman olarak alÄ±r ve o eleman da int ya da float olmadÄ±ÄŸÄ± iÃ§in 
#1 e dÃ¶necektir. Ancak ben lisyenin baÅŸÄ±na * koyarsam bu, listeyi unpack et demek olur. Yani;


#def multpl(*nums):
#    multp=1
#    for i in nums:
#        if type(i)==int or type(i)==float:
#            multp *= i
#    return multp
#
#mylist=[4,5,6,7,8]
#print(multpl(*mylist))
#print(*mylist) # Burada nasÄ±l unpack ettiÄŸini gÃ¶rebiliriz.




#EÄŸer positional argument deÄŸil de keyword argument ise kullanmak istediÄŸim bakalÄ±m nasÄ±l oluyor:

#def properCal(**fruits):
#    for i in fruits.items():
#        print(i)
#    print(type(fruits))
#
#B={'Ananas': 65, 'Kiwi':40, 'Mango':78, 'Kavun':46}
#properCal(**B) #Burada Ã§aÄŸÄ±rÄ±rken ** koymak Ã§ok Ã¶nemli. Bu unpack et demek oluyor.



#EÄŸer standart parametre il bu positional argument ve keywork argument koyacak olursak bu durumda #sÄ±ralama Ã¶nem kazanÄ±r
#
#def myFunc(arg1, arg2, *args, **kwargs): #yazÄ±mÄ±ndk gibi bir sÄ±ra izlenmek zorunluluÄŸu vardÄ±r.
    

deger = int(input('Lutfen hesaplamak istediginiz n deÄŸerini giriniz : '))
listem =[*range(1,deger+1)]
def factorl(*args):
    multpl = 1
    for i in args:
        multpl *= i
    return multpl

toplam=0
print(listem)
for i in listem:
    toplam+=(factorl(*list(range(1,i+1))))/i
print(toplam)




